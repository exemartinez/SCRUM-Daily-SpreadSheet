TestCase subclass: #DailyQuestionAnalystsSpreadSheetTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'GoogleDrive-Analyzer-Tests'!!DailyQuestionAnalystsSpreadSheetTest commentStamp: '<historical>' prior: 0!This is the spreadsheet structure expected from the analyst in MERCAP.!!DailyQuestionAnalystsSpreadSheetTest methodsFor: 'tests' stamp: 'EzequielHMartinez 4/1/2017 21:30'!testSpreadSheetStructure	"Wirtes a dummy spreadsheet with dummy data, mocks it up, tests that it could be read and loaded from the DailyQuestionAnalystsSpreadsheet class."		self assert: false! !TestCase subclass: #DailyQuestionSpreadSheetTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'GoogleDrive-Analyzer-Tests'!!DailyQuestionSpreadSheetTest commentStamp: '<historical>' prior: 0!Presents the DailyQuestionsSpreaddSheet object, which will be a type of class that will hace the columns and objects required to contain the "Daily Questions" and its contents in memory.This class is general, and the format must be subclassed, and every subclass, must be tested.!!DailyQuestionSpreadSheetTest methodsFor: 'tests' stamp: 'EzequielHMartinez 4/1/2017 21:24'!testDailySpreadSheetStructure	"The structure has to be the same that the DailyBot already contains."	self assert: false	! !TestCase subclass: #DailyQuestionTradingRoomSpreadSheetTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'GoogleDrive-Analyzer-Tests'!!DailyQuestionTradingRoomSpreadSheetTest commentStamp: '<historical>' prior: 0!The class DailyQuestionTradingRoom has a totally different structure: rows, columns and values and meaning is differente.Both must subclass spreadsheet.!!DailyQuestionTradingRoomSpreadSheetTest methodsFor: 'tests' stamp: 'EzequielHMartinez 4/1/2017 21:30'!testSpreadSheetStructure	"Wirtes a dummy spreadsheet with dummy data, mocks it up, tests that it could be read and loaded from the DailyQuestionTradingRoomSpreadsheet class."	self assert: false	! !TestCase subclass: #SpreadSheetConsolidatorTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'GoogleDrive-Analyzer-Tests'!!SpreadSheetConsolidatorTest commentStamp: '<historical>' prior: 0!If several different spreadsheets could be consolidated into one. Several mock objects are produced.!!SpreadSheetConsolidatorTest methodsFor: 'tests' stamp: 'EzequielHMartinez 4/1/2017 21:23'!testTwoSpreadUnion	"Mocks two dummy spreadsheets in memory; then unifies them and tests that there is no repeated rows. (those has to be essentially the same kind of spreadsheets with different data)"	"It joins different SpreadSheets subclasses and proves that, after the consolidation, the final spreadsheet is a DailyQuestionSpreadSheet structure that has all the same data."	self assert: false	! !TestCase subclass: #SpreadSheetHandlerTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'GoogleDrive-Analyzer-Tests'!!SpreadSheetHandlerTest commentStamp: '<historical>' prior: 0!It test the general class for handling of the Google Spreadsheet.!!SpreadSheetHandlerTest methodsFor: 'tests' stamp: 'EzequielHMartinez 4/1/2017 21:02'!testOpenSpreadSheet	"Opens a given google spreadsheet ~ tests that the class can read the google format."	self assert: false.	"Create a mock spreadsheet"	"Pass the spreadsheet to the SpreadSheetHandler"	"Read it and write simple data"	! !!SpreadSheetHandlerTest methodsFor: 'tests' stamp: 'EzequielHMartinez 4/1/2017 21:02'!testWriteANewRow	"Writes a new row in a dummy spreadsheet and then closes it."	self assert: false.	! !!SpreadSheetHandlerTest methodsFor: 'tests' stamp: 'EzequielHMartinez 4/1/2017 21:04'!testReadARow"Writes a row, then reads it. Then writes several other rows, then reads them and test the returned values."	self assert: false! !!SpreadSheetHandlerTest methodsFor: 'tests' stamp: 'EzequielHMartinez 4/1/2017 21:05'!testPersistSpreadSheet"Creates a dummy spreadsheet in memory, puts dummy or mocked data inside it, then writes it to the disk, then erases it."	self assert: false! !TestCase subclass: #SpreadSheetTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'GoogleDrive-Analyzer-Tests'!!SpreadSheetTest commentStamp: '<historical>' prior: 0!A Google Drive SpreadSheet; it has to behave like an MS Excel. It must be tested both ways.!!SpreadSheetTest methodsFor: 'tests' stamp: 'EzequielHMartinez 4/24/2017 22:22'!testMERCAPSpreadsheetStructure	"This ensures that the spreadsheet is the same that could be found in a Google Drive environment; it test its major properties, mocks it up and then closes it empty."	| sheet |	sheet := SpreadSheet new.	"Here goes the assertions and tests."	self assert: (sheet openFile:'/Users/hernanezequielmartinez/Documents/MERCAP - dailies/Dailies - Team Analistas.xlsx').	self		assert: (sheet tabs = 0 and: sheet newTab = 1)		description:			'you must have a tab for the spreadsheet to operate and you must check that there is none'.	self		assert: (sheet row: 1 col: 'A' value: 4)		description: 'Evaluates the data was properly assigned to a row'.	self		assert: (sheet row: 1 col: 'A') = 4		description: 'Checks it''s the same setted value that was there before.'.	sheet tab: 1 name: 'first'.	self		assert: (sheet tab: 1 name) = 'first'		description: 'the name can be assigned to the given sheet'! !TestCase subclass: #WebServicesTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'GoogleDrive-Analyzer-Tests'!!WebServicesTest commentStamp: '<historical>' prior: 0!Its a test case to see if the web server is properly configured.!!WebServicesTest methodsFor: 'tests' stamp: 'EzequielHMartinez 3/30/2017 22:39'!testServerConfiguration	"It tests that web server is properly configured"	| servidor |	servidor := ZnServer default.	self assert: servidor isRunning description: 'Evaluates the server is running.'.	self assert: servidor port = 8080 description: 'Evaluates the right port.'! !!WebServicesTest methodsFor: 'tests' stamp: 'EzequielHMartinez 4/1/2017 20:55'!testGoogleRESTAPIAvailability	"Test if the required API services are available."	self		assert:			(ZnClient new				url: 'https://spreadsheets.google.com';				get;				response;				isSuccess)		description:			'Tests if the REST API for dealing with the spreadsheets is available for querying. (You''ll need to be authenticated.)'! !